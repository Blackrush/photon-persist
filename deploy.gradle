buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.6.3'
    }
}

apply plugin: org.ajoberstar.gradle.git.plugins.GithubPagesPlugin

import org.ajoberstar.gradle.git.tasks.*

boolean deleteRecursive(def path) {
    if (!path.exists()) false
    boolean ret = true

    if (path.isDirectory()) {
        for (File f : path.listFiles()) {
            ret = ret && deleteRecursive(f)
        }
    }

    ret && path.delete()
}

def mavenRepoDir = new File(rootProject.buildDir, 'maven-repo')

apply plugin: 'maven'

task sourcesJar(dependsOn: sources, type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task scaladocJar(dependsOn: scaladoc, type: Jar) {
    from scaladoc.destinationDir
    classifier = 'scaladoc'
}

artifacts {
    archives sourcesJar
    archives scaladocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${mavenRepoDir.path}")

            pom.artifactId = project.name
            pom.project {
                licenses {
                    license {
                        name 'The MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                        distribution 'repo'
                    }
                }
                scm {
                    connection 'git@github.com:Blackrush/photon-persist.git'
                }
                developers {
                    developer {
                        id 'Blackrush'
                        name 'Antoine CHAUVIN'
                        email 'antoine.chauvin@etu.univ-lehavre.fr'
                        url 'https://github.com/Blackrush'
                    }
                }
            }
        }
    }
}
uploadArchives.dependsOn ':cloneMavenRepo'

task cleanMavenRepo(description: 'Clean the maven-repo directory', group: 'Publish') {
    enabled = mavenRepoDir.exists()
    mavenRepoDir.listFiles().findAll { !['.git', 'README.md'].contains(it.name) }.each { deleteRecursive it }
}

task cloneMavenRepo(dependsOn: cleanMavenRepo, type: GitClone, description: 'Create the maven-repo directory where the artifacts are deployed', group: 'Publish') {
    enabled = !mavenRepoDir.exists()

    uri = 'git@github.com:Blackrush/photon-persist.git'
    destinationPath = mavenRepoDir
    branch = 'maven-repo'
    checkout = true
}

task addFilesMavenRepo(dependsOn: uploadArchives, type: GitAdd, description: 'Prepare the release', group: 'Publish') {
    repoPath = mavenRepoDir

    include '**/*'
}

task commitMavenRepo(dependsOn: addFilesMavenRepo, type: GitCommit, description: 'Release the artifacts', group: 'Publish') {
    repoPath = mavenRepoDir

    author = new org.eclipse.jgit.lib.PersonIdent('Blackrush', 'blackrushx@gmail.com')
    committer = author
    message = "Release ${project.version}"
    commitAll = true
}

task pushMavenRepo(dependsOn: commitMavenRepo, type: GitPush, description: 'Publish the release to the remote repository', group: 'Publish') {
    repoPath = mavenRepoDir

    //credentials {
    //    username = pubUsername
    //    password = pubPassword
    //}
}

task publish(dependsOn: pushMavenRepo, description: 'Release and publish', group: 'Publish')

githubPages {
    repoUri = 'git@github.com:Blackrush/photon-persist.git'
    pages {
        from(rootProject.scaladoc.outputs.files)
    }
}